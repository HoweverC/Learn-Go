package main

import "fmt"

/*
闭包的概念：
可以包含自由（未绑定到特定对象）变量的代码块
这些变量不在这个代码块内或者任何全局上下文中定义，而是在定义代码块的环境中定义
要执行的代码块（由于自由变量包含在代码块中，所以这些自由变量以及它们引用的对象没有被释放）为自由变量提供绑定的计算环境（作用域）

闭包的价值 :
闭包的价值在于可以作为函数对象或者匿名函数
对于类型系统而言，这意味着不仅要表示数据还要表示代码
支持闭包的多数语言都将函数作为第一级对象，这些函数可以存储到变量中作为参数传递给其他函数，最重要的是能够被函数动态创建和返回

闭包的实现确保只要闭包还被使用，那么被闭包引用的变量会一直存在

闭包会使得函数中的变量都被保存在内存中，内存消耗大
*/

//函数的返回值是匿名函数
func Func() func() int{
	var x int
	return func() int{
		x++
		return x*x
	}
}

func main() {
	//闭包的生命周期不由它的作用域决定
	//匿名函数不关心捕获的变量或常量是否超出作用域，只要还有闭包在使用它，这些变量就会一直存在
	f1 := Func()
	fmt.Println(f1())
	fmt.Println(f1())
	fmt.Println(f1())
}
